#include "Fw_global_config.h"
#include <stdio.h>
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include "timers.h"
#include "RtosTask.h"

/*    Include the generic headers required for QORC */
#include "eoss3_hal_gpio.h"
#include "eoss3_hal_rtc.h"
#include "eoss3_hal_timer.h"
#include "eoss3_hal_fpga_usbserial.h"
#include "ql_time.h"
#include "s3x_clock_hal.h"
#include "s3x_clock.h"
#include "s3x_pi.h"
#include "dbg_uart.h"

#include "cli.h"

extern const struct cli_cmd_entry my_main_menu[];

const char *SOFTWARE_VERSION_STR;

void qf_hardwareSetup();
static void nvic_init(void);

#define GPIO_OUTPUT_MODE (1)
#define GPIO_INPUT_MODE (0)

void PyHal_GPIO_SetDir(uint8_t gpionum, uint8_t iomode);
int PyHal_GPIO_GetDir(uint8_t gpionum);
int PyHal_GPIO_Set(uint8_t gpionum, uint8_t gpioval);
int PyHal_GPIO_Get(uint8_t gpionum);

int main(void)
{
    uint32_t i = 0, j = 0, k = 0;
    SOFTWARE_VERSION_STR = "qorc-onion-apps/qf_hello-fpga-gpio-ctlr";

    qf_hardwareSetup();
    nvic_init();

    dbg_str("\n\n");
    dbg_str("##########################\n");
    dbg_str("Quicklogic QuickFeather FPGA GPIO CONTROLLER EXAMPLE\n");
    dbg_str("SW Version: ");
    dbg_str(SOFTWARE_VERSION_STR);
    dbg_str("\n");
    dbg_str(__DATE__ " " __TIME__ "\n");
    dbg_str("##########################\n\n");

    dbg_str("\n\nHello GPIO!!\n\n"); // <<<<<<<<<<<<<<<<<<<<<  Change me!

    CLI_start_task(my_main_menu);
    HAL_Delay_Init();

    // Configure GPIO pins
    PyHal_GPIO_SetDir(18, GPIO_OUTPUT_MODE); // Output pin
    PyHal_GPIO_SetDir(19, GPIO_INPUT_MODE);  // Input pin 1
    PyHal_GPIO_SetDir(20, GPIO_INPUT_MODE);  // Input pin 2
    PyHal_GPIO_SetDir(21, GPIO_INPUT_MODE);  // Input pin 3
    PyHal_GPIO_SetDir(22, GPIO_INPUT_MODE);  // Input pin 4

    int blink_count = 0;
    while (blink_count < 5)
    {
        // Blink the LED
        PyHal_GPIO_Set(18, 1); // LED ON
        HAL_DelayUSec(500000); // 500 ms
        PyHal_GPIO_Set(18, 0); // LED OFF
        HAL_DelayUSec(500000); // 500 ms
        blink_count++;
    }

    vTaskStartScheduler();
    dbg_str("\n");

    while (1)
        ;
}

static void nvic_init(void)
{
    NVIC_SetPriority(Ffe0_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
    NVIC_SetPriority(SpiMs_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
    NVIC_SetPriority(CfgDma_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
    NVIC_SetPriority(Uart_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
    NVIC_SetPriority(FbMsg_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
}

void SystemInit(void)
{
}

#define FGPIO_DIRECTION_REG (0x40024008)
#define FGPIO_OUTPUT_REG (0x40024004)
#define FGPIO_INPUT_REG (0x40024000)
void PyHal_GPIO_SetDir(uint8_t gpionum, uint8_t iomode)
{
    uint32_t tempscratch32;

    if (gpionum > 31)
        return;

    tempscratch32 = *(uint32_t *)(FGPIO_DIRECTION_REG);
    if (iomode)
        *(uint32_t *)(FGPIO_DIRECTION_REG) = tempscratch32 | (0x1 << gpionum);
    else
        *(uint32_t *)(FGPIO_DIRECTION_REG) = tempscratch32 & (~(0x1 << gpionum));
}

int PyHal_GPIO_GetDir(uint8_t gpionum)
{
    uint32_t tempscratch32;
    int result = 0;

    if (gpionum > 31)
        return -1;

    tempscratch32 = *(uint32_t *)(FGPIO_DIRECTION_REG);

    result = ((tempscratch32 & (0x1 << gpionum)) ? GPIO_OUTPUT_MODE : GPIO_INPUT_MODE);

    return result;
}

int PyHal_GPIO_Set(uint8_t gpionum, uint8_t gpioval)
{
    uint32_t tempscratch32;

    if (gpionum > 31)
        return -1;

    tempscratch32 = *(uint32_t *)(FGPIO_DIRECTION_REG);

    if (!(tempscratch32 & (0x1 << gpionum)))
    {
        return -1;
    }

    tempscratch32 = *(uint32_t *)(FGPIO_OUTPUT_REG);

    if (gpioval > 0)
    {

        *(uint32_t *)(FGPIO_OUTPUT_REG) = tempscratch32 | (0x1 << gpionum);
    }
    else
    {
        *(uint32_t *)(FGPIO_OUTPUT_REG) = tempscratch32 & ~(0x1 << gpionum);
    }

    return 0;
}

int PyHal_GPIO_Get(uint8_t gpionum)
{
    uint32_t tempscratch32;
    uint32_t gpioval_input;

    if (gpionum > 31)
        return -1;

    tempscratch32 = *(uint32_t *)(FGPIO_INPUT_REG);
    gpioval_input = (tempscratch32 >> gpionum) & 0x1;

    return ((int)gpioval_input);
}

